/**
 * Script to generate a PR comment from analysis results
 * Usage: node generatePRComment.js
 */

import fs from 'fs';
import path from 'path';

// Categories based on GitHub's Well-Architected Framework
const CATEGORIES = {
  FUNDAMENTALS: 'GitHub Fundamentals',
  COLLABORATION: 'Code Collaboration & Quality',
  VELOCITY: 'Engineering Velocity'
};

const main = async () => {
  try {
    // Get PR number from environment variable
    const prNumber = process.env.PR_NUMBER;
    
    if (!prNumber) {
      console.error('PR_NUMBER environment variable is not set');
      process.exit(1);
    }
    
    // Read the latest PR insights
    const today = new Date().toISOString().split('T')[0];
    const insightsFile = path.join('data', 'insights', today, 'pr-insights.json');
    
    if (!fs.existsSync(insightsFile)) {
      console.error(`Insights file not found: ${insightsFile}`);
      process.exit(1);
    }
    
    const insights = JSON.parse(fs.readFileSync(insightsFile, 'utf8'));
    
    // Generate markdown comment
    let comment = `# 🚀 OctoFlow Startup GitHub Health Analysis\n\n`;
    
    // Calculate average score
    const scores = insights.map(insight => insight.analysis.score || 0);
    const avgScore = scores.length > 0 ? scores.reduce((a, b) => a + b, 0) / scores.length : 0;
    const scoreEmoji = getScoreEmoji(avgScore);
    
    // Convert to 0-100 scale for better understanding
    const healthScore = Math.round(avgScore * 10);
    
    comment += `## 🏥 GitHub Health Score\n\n`;
    comment += `${scoreEmoji} **${healthScore}/100**\n\n`;
    
    // Calculate category scores
    const categoryScores = calculateCategoryScores(insights);
    
    comment += `## 📊 Category Breakdown\n\n`;
    
    Object.entries(categoryScores).forEach(([category, score]) => {
      const categoryEmoji = getScoreEmoji(score / 10);
      comment += `- **${category}**: ${categoryEmoji} ${Math.round(score)}/100\n`;
    });
    
    comment += `\n`;
    
    // Add recommendations
    comment += `## 💡 Startup-Focused Recommendations\n\n`;
    
    const allRecommendations = insights.flatMap(insight => 
      insight.analysis.recommendations || []
    );
    
    if (allRecommendations.length > 0) {
      const uniqueRecommendations = [...new Set(allRecommendations)];
      // Limit to top 5 recommendations
      uniqueRecommendations.slice(0, 5).forEach(rec => {
        comment += `- ${rec}\n`;
      });
    } else {
      comment += `No specific recommendations for this PR.\n`;
    }
    
    // Add strengths
    comment += `\n## ✅ Engineering Strengths\n\n`;
    
    const allStrengths = insights.flatMap(insight => 
      insight.analysis.strengths || []
    );
    
    if (allStrengths.length > 0) {
      const uniqueStrengths = [...new Set(allStrengths)];
      // Limit to top 3 strengths
      uniqueStrengths.slice(0, 3).forEach(strength => {
        comment += `- ${strength}\n`;
      });
    } else {
      comment += `No specific strengths identified for this PR.\n`;
    }
    
    // Add investor readiness note
    comment += `\n## 💼 Investor Readiness Impact\n\n`;
    comment += `This PR ${getInvestorReadinessImpact(avgScore)}\n`;
    
    // Add security note
    comment += `\n## 🔒 Security Considerations\n\n`;
    comment += `OctoFlow has analyzed this PR for potential security implications. `;
    
    // Check if there are any security-related keywords in the PR
    const securityKeywords = ['security', 'vulnerability', 'exploit', 'attack', 'hack', 'cve', 'fix'];
    const hasSecurityKeywords = insights.some(insight => {
      const title = insight.prTitle?.toLowerCase() || '';
      const description = insight.analysis?.description?.toLowerCase() || '';
      return securityKeywords.some(keyword => title.includes(keyword) || description.includes(keyword));
    });
    
    if (hasSecurityKeywords) {
      comment += `This PR appears to contain security-related changes. Please ensure proper review by security experts.\n`;
    } else {
      comment += `No obvious security concerns were detected in this PR. However, always review code changes carefully for security implications.\n`;
    }
    
    // Add footer
    comment += `\n---\n`;
    comment += `*This analysis was generated by [OctoFlow](https://github.com/cdolik/OctoFlow), an AI-powered GitHub productivity tool for startups.*\n`;
    comment += `*Based on GitHub's Well-Architected Framework and startup best practices.*\n`;
    
    // Write comment to file
    const commentFile = path.join('data', 'pr-comment.md');
    fs.writeFileSync(commentFile, comment);
    
    console.log(`PR comment saved to ${commentFile}`);
  } catch (error) {
    console.error('Error:', error);
    process.exit(1);
  }
};

// Helper function to get emoji based on score
function getScoreEmoji(score) {
  if (score >= 8) return '🌟';
  if (score >= 6) return '✅';
  if (score >= 4) return '⚠️';
  return '❌';
}

// Helper function to calculate category scores
function calculateCategoryScores(insights) {
  // Extract ratings from insights
  const allRatings = insights.map(insight => insight.analysis.ratings || {});
  
  // Calculate fundamentals score (title quality, description quality)
  const fundamentalsScore = allRatings.reduce((sum, ratings) => {
    return sum + ((ratings.titleQuality || 0) + (ratings.descriptionQuality || 0)) / 2;
  }, 0) / allRatings.length * 100;
  
  // Calculate collaboration score (review quality, size complexity)
  const collaborationScore = allRatings.reduce((sum, ratings) => {
    return sum + ((ratings.reviewQuality || 0) + (ratings.sizeComplexity || 0)) / 2;
  }, 0) / allRatings.length * 100;
  
  // Calculate velocity score (overall score as proxy for now)
  const velocityScore = insights.reduce((sum, insight) => {
    return sum + (insight.analysis.score || 0);
  }, 0) / insights.length * 100;
  
  return {
    [CATEGORIES.FUNDAMENTALS]: fundamentalsScore,
    [CATEGORIES.COLLABORATION]: collaborationScore,
    [CATEGORIES.VELOCITY]: velocityScore
  };
}

// Helper function to get investor readiness impact
function getInvestorReadinessImpact(score) {
  if (score >= 8) {
    return 'demonstrates excellent engineering practices that would impress potential investors. Your team shows strong attention to detail and process maturity.';
  } else if (score >= 6) {
    return 'shows good engineering practices that align with investor expectations. Continue maintaining these standards as you scale.';
  } else if (score >= 4) {
    return 'meets basic engineering standards but has room for improvement. Consider implementing the recommendations to strengthen your GitHub practices before investor due diligence.';
  } else {
    return 'needs significant improvement to meet investor expectations. Focus on implementing the recommendations to establish stronger engineering practices.';
  }
}

main(); 